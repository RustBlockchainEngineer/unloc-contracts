/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export type SetVotingInstructionArgs = {
  votingNumber: beet.bignum
  votingStartTimestamp: beet.bignum
  votingEndTimestamp: beet.bignum
}
/**
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export const setVotingStruct = new beet.BeetArgsStruct<
  SetVotingInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['votingNumber', beet.u64],
    ['votingStartTimestamp', beet.u64],
    ['votingEndTimestamp', beet.u64],
  ],
  'SetVotingInstructionArgs'
)
/**
 * Accounts required by the _setVoting_ instruction
 *
 * @property [_writable_, **signer**] superOwner
 * @property [_writable_, **signer**] payer
 * @property [_writable_] globalState
 * @property [_writable_] voting
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export type SetVotingInstructionAccounts = {
  superOwner: web3.PublicKey
  payer: web3.PublicKey
  globalState: web3.PublicKey
  voting: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
}

export const setVotingInstructionDiscriminator = [
  68, 253, 54, 220, 235, 124, 126, 62,
]

/**
 * Creates a _SetVoting_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetVoting
 * @category generated
 */
export function createSetVotingInstruction(
  accounts: SetVotingInstructionAccounts,
  args: SetVotingInstructionArgs,
  programId = new web3.PublicKey('6z6RuFauTG511XRakJnPhxUTCVPohv6oC69xieMdm4Z9')
) {
  const [data] = setVotingStruct.serialize({
    instructionDiscriminator: setVotingInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.superOwner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.globalState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.voting,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
