/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: 'You are not authorized to perform this action.'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Unauthorized'
  constructor() {
    super('You are not authorized to perform this action.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * AlreadyInUse: 'AlreadyInUse'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyInUseError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'AlreadyInUse'
  constructor() {
    super('AlreadyInUse')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyInUseError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new AlreadyInUseError())
createErrorFromNameLookup.set('AlreadyInUse', () => new AlreadyInUseError())

/**
 * InvalidProgramAddress: 'InvalidProgramAddress'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProgramAddressError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidProgramAddress'
  constructor() {
    super('InvalidProgramAddress')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProgramAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidProgramAddressError())
createErrorFromNameLookup.set(
  'InvalidProgramAddress',
  () => new InvalidProgramAddressError()
)

/**
 * InvalidState: 'InvalidState'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidState'
  constructor() {
    super('InvalidState')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidStateError())
createErrorFromNameLookup.set('InvalidState', () => new InvalidStateError())

/**
 * InvalidOwner: 'InvalidOwner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOwnerError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidOwner'
  constructor() {
    super('InvalidOwner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidOwnerError())
createErrorFromNameLookup.set('InvalidOwner', () => new InvalidOwnerError())

/**
 * NotAllowed: 'NotAllowed'
 *
 * @category Errors
 * @category generated
 */
export class NotAllowedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'NotAllowed'
  constructor() {
    super('NotAllowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new NotAllowedError())
createErrorFromNameLookup.set('NotAllowed', () => new NotAllowedError())

/**
 * MathOverflow: 'Math operation overflow'
 *
 * @category Errors
 * @category generated
 */
export class MathOverflowError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'MathOverflow'
  constructor() {
    super('Math operation overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MathOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new MathOverflowError())
createErrorFromNameLookup.set('MathOverflow', () => new MathOverflowError())

/**
 * InvalidAccountInput: 'InvalidAccountInput'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountInputError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidAccountInput'
  constructor() {
    super('InvalidAccountInput')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountInputError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidAccountInputError())
createErrorFromNameLookup.set(
  'InvalidAccountInput',
  () => new InvalidAccountInputError()
)

/**
 * InvalidPubkey: 'InvalidPubkey'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPubkeyError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidPubkey'
  constructor() {
    super('InvalidPubkey')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPubkeyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidPubkeyError())
createErrorFromNameLookup.set('InvalidPubkey', () => new InvalidPubkeyError())

/**
 * InvalidAmount: 'InvalidAmount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAmountError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidAmount'
  constructor() {
    super('InvalidAmount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidAmountError())
createErrorFromNameLookup.set('InvalidAmount', () => new InvalidAmountError())

/**
 * InvalidDenominator: 'InvalidDenominator'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDenominatorError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidDenominator'
  constructor() {
    super('InvalidDenominator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDenominatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidDenominatorError())
createErrorFromNameLookup.set(
  'InvalidDenominator',
  () => new InvalidDenominatorError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
