/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link GlobalState}
 * @category Accounts
 * @category generated
 */
export type GlobalStateArgs = {
  superOwner: web3.PublicKey
  treasuryWallet: web3.PublicKey
  accruedInterestNumerator: beet.bignum
  minRepaidNumerator: beet.bignum
  aprNumerator: beet.bignum
  expireLoanDuration: beet.bignum
  denominator: beet.bignum
  rewardVault: web3.PublicKey
  rewardRate: beet.bignum
  tvlSol: beet.bignum
  tvlUsdc: beet.bignum
  fundedAmount: beet.bignum
  distributedAmount: beet.bignum
  lastDistributedTime: beet.bignum
  rpsSol: beet.bignum
  rpsUsdc: beet.bignum
  lenderRewardsPercentage: beet.bignum
  unlocStakingPid: web3.PublicKey
  unlocStakingPoolId: web3.PublicKey
  votingPid: web3.PublicKey
  voting: web3.PublicKey
  reserved: beet.bignum[] /* size: 15 */
}

export const globalStateDiscriminator = [163, 46, 74, 168, 216, 123, 133, 98]
/**
 * Holds the data for the {@link GlobalState} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GlobalState implements GlobalStateArgs {
  private constructor(
    readonly superOwner: web3.PublicKey,
    readonly treasuryWallet: web3.PublicKey,
    readonly accruedInterestNumerator: beet.bignum,
    readonly minRepaidNumerator: beet.bignum,
    readonly aprNumerator: beet.bignum,
    readonly expireLoanDuration: beet.bignum,
    readonly denominator: beet.bignum,
    readonly rewardVault: web3.PublicKey,
    readonly rewardRate: beet.bignum,
    readonly tvlSol: beet.bignum,
    readonly tvlUsdc: beet.bignum,
    readonly fundedAmount: beet.bignum,
    readonly distributedAmount: beet.bignum,
    readonly lastDistributedTime: beet.bignum,
    readonly rpsSol: beet.bignum,
    readonly rpsUsdc: beet.bignum,
    readonly lenderRewardsPercentage: beet.bignum,
    readonly unlocStakingPid: web3.PublicKey,
    readonly unlocStakingPoolId: web3.PublicKey,
    readonly votingPid: web3.PublicKey,
    readonly voting: web3.PublicKey,
    readonly reserved: beet.bignum[] /* size: 15 */
  ) {}

  /**
   * Creates a {@link GlobalState} instance from the provided args.
   */
  static fromArgs(args: GlobalStateArgs) {
    return new GlobalState(
      args.superOwner,
      args.treasuryWallet,
      args.accruedInterestNumerator,
      args.minRepaidNumerator,
      args.aprNumerator,
      args.expireLoanDuration,
      args.denominator,
      args.rewardVault,
      args.rewardRate,
      args.tvlSol,
      args.tvlUsdc,
      args.fundedAmount,
      args.distributedAmount,
      args.lastDistributedTime,
      args.rpsSol,
      args.rpsUsdc,
      args.lenderRewardsPercentage,
      args.unlocStakingPid,
      args.unlocStakingPoolId,
      args.votingPid,
      args.voting,
      args.reserved
    )
  }

  /**
   * Deserializes the {@link GlobalState} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [GlobalState, number] {
    return GlobalState.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link GlobalState} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<GlobalState> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find GlobalState account at ${address}`)
    }
    return GlobalState.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link GlobalState} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [GlobalState, number] {
    return globalStateBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link GlobalState} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return globalStateBeet.serialize({
      accountDiscriminator: globalStateDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link GlobalState}
   */
  static get byteSize() {
    return globalStateBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link GlobalState} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      GlobalState.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link GlobalState} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === GlobalState.byteSize
  }

  /**
   * Returns a readable version of {@link GlobalState} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      superOwner: this.superOwner.toBase58(),
      treasuryWallet: this.treasuryWallet.toBase58(),
      accruedInterestNumerator: (() => {
        const x = <{ toNumber: () => number }>this.accruedInterestNumerator
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minRepaidNumerator: (() => {
        const x = <{ toNumber: () => number }>this.minRepaidNumerator
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      aprNumerator: (() => {
        const x = <{ toNumber: () => number }>this.aprNumerator
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      expireLoanDuration: (() => {
        const x = <{ toNumber: () => number }>this.expireLoanDuration
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      denominator: (() => {
        const x = <{ toNumber: () => number }>this.denominator
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rewardVault: this.rewardVault.toBase58(),
      rewardRate: (() => {
        const x = <{ toNumber: () => number }>this.rewardRate
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      tvlSol: (() => {
        const x = <{ toNumber: () => number }>this.tvlSol
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      tvlUsdc: (() => {
        const x = <{ toNumber: () => number }>this.tvlUsdc
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      fundedAmount: (() => {
        const x = <{ toNumber: () => number }>this.fundedAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      distributedAmount: (() => {
        const x = <{ toNumber: () => number }>this.distributedAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lastDistributedTime: (() => {
        const x = <{ toNumber: () => number }>this.lastDistributedTime
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rpsSol: (() => {
        const x = <{ toNumber: () => number }>this.rpsSol
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rpsUsdc: (() => {
        const x = <{ toNumber: () => number }>this.rpsUsdc
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lenderRewardsPercentage: (() => {
        const x = <{ toNumber: () => number }>this.lenderRewardsPercentage
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      unlocStakingPid: this.unlocStakingPid.toBase58(),
      unlocStakingPoolId: this.unlocStakingPoolId.toBase58(),
      votingPid: this.votingPid.toBase58(),
      voting: this.voting.toBase58(),
      reserved: this.reserved,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const globalStateBeet = new beet.BeetStruct<
  GlobalState,
  GlobalStateArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['superOwner', beetSolana.publicKey],
    ['treasuryWallet', beetSolana.publicKey],
    ['accruedInterestNumerator', beet.u64],
    ['minRepaidNumerator', beet.u64],
    ['aprNumerator', beet.u64],
    ['expireLoanDuration', beet.u64],
    ['denominator', beet.u64],
    ['rewardVault', beetSolana.publicKey],
    ['rewardRate', beet.u64],
    ['tvlSol', beet.u64],
    ['tvlUsdc', beet.u64],
    ['fundedAmount', beet.u64],
    ['distributedAmount', beet.u64],
    ['lastDistributedTime', beet.u64],
    ['rpsSol', beet.u128],
    ['rpsUsdc', beet.u128],
    ['lenderRewardsPercentage', beet.u64],
    ['unlocStakingPid', beetSolana.publicKey],
    ['unlocStakingPoolId', beetSolana.publicKey],
    ['votingPid', beetSolana.publicKey],
    ['voting', beetSolana.publicKey],
    ['reserved', beet.uniformFixedSizeArray(beet.u128, 15)],
  ],
  GlobalState.fromArgs,
  'GlobalState'
)
