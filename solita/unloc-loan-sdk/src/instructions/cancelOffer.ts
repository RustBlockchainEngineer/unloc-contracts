/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CancelOffer
 * @category generated
 */
export const cancelOfferStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CancelOfferInstructionArgs'
)
/**
 * Accounts required by the _cancelOffer_ instruction
 *
 * @property [_writable_, **signer**] borrower
 * @property [_writable_] offer
 * @property [] nftMint
 * @property [_writable_] userVault
 * @property [] edition
 * @property [] metadataProgram
 * @category Instructions
 * @category CancelOffer
 * @category generated
 */
export type CancelOfferInstructionAccounts = {
  borrower: web3.PublicKey
  offer: web3.PublicKey
  nftMint: web3.PublicKey
  userVault: web3.PublicKey
  edition: web3.PublicKey
  metadataProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
}

export const cancelOfferInstructionDiscriminator = [
  92, 203, 223, 40, 92, 89, 53, 119,
]

/**
 * Creates a _CancelOffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CancelOffer
 * @category generated
 */
export function createCancelOfferInstruction(
  accounts: CancelOfferInstructionAccounts,
  programId = new web3.PublicKey('6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh')
) {
  const [data] = cancelOfferStruct.serialize({
    instructionDiscriminator: cancelOfferInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.borrower,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.offer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nftMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.edition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
