/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DepositRewards
 * @category generated
 */
export type DepositRewardsInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category DepositRewards
 * @category generated
 */
export const depositRewardsStruct = new beet.BeetArgsStruct<
  DepositRewardsInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'DepositRewardsInstructionArgs'
)
/**
 * Accounts required by the _depositRewards_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] globalState
 * @property [_writable_] rewardVault
 * @property [] chainlinkProgram
 * @property [] solFeed
 * @property [] usdcFeed
 * @property [_writable_] userRewardVault
 * @property [] clock
 * @category Instructions
 * @category DepositRewards
 * @category generated
 */
export type DepositRewardsInstructionAccounts = {
  authority: web3.PublicKey
  globalState: web3.PublicKey
  rewardVault: web3.PublicKey
  chainlinkProgram: web3.PublicKey
  solFeed: web3.PublicKey
  usdcFeed: web3.PublicKey
  userRewardVault: web3.PublicKey
  tokenProgram?: web3.PublicKey
  clock: web3.PublicKey
}

export const depositRewardsInstructionDiscriminator = [
  52, 249, 112, 72, 206, 161, 196, 1,
]

/**
 * Creates a _DepositRewards_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositRewards
 * @category generated
 */
export function createDepositRewardsInstruction(
  accounts: DepositRewardsInstructionAccounts,
  args: DepositRewardsInstructionArgs,
  programId = new web3.PublicKey('6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh')
) {
  const [data] = depositRewardsStruct.serialize({
    instructionDiscriminator: depositRewardsInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.globalState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.chainlinkProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.solFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userRewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
