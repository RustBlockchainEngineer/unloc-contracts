/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CancelSubOffer
 * @category generated
 */
export const cancelSubOfferStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CancelSubOfferInstructionArgs'
)
/**
 * Accounts required by the _cancelSubOffer_ instruction
 *
 * @property [_writable_, **signer**] borrower
 * @property [_writable_] offer
 * @property [_writable_] subOffer
 * @category Instructions
 * @category CancelSubOffer
 * @category generated
 */
export type CancelSubOfferInstructionAccounts = {
  borrower: web3.PublicKey
  offer: web3.PublicKey
  subOffer: web3.PublicKey
}

export const cancelSubOfferInstructionDiscriminator = [
  31, 18, 199, 56, 112, 136, 131, 47,
]

/**
 * Creates a _CancelSubOffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CancelSubOffer
 * @category generated
 */
export function createCancelSubOfferInstruction(
  accounts: CancelSubOfferInstructionAccounts,
  programId = new web3.PublicKey('6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh')
) {
  const [data] = cancelSubOfferStruct.serialize({
    instructionDiscriminator: cancelSubOfferInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.borrower,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.offer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.subOffer,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
