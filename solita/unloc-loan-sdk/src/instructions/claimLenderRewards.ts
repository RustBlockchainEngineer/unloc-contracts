/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimLenderRewards
 * @category generated
 */
export const claimLenderRewardsStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimLenderRewardsInstructionArgs'
)
/**
 * Accounts required by the _claimLenderRewards_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] globalState
 * @property [_writable_] subOffer
 * @property [_writable_] rewardVault
 * @property [] chainlinkProgram
 * @property [] solFeed
 * @property [] usdcFeed
 * @property [_writable_] lenderRewardVault
 * @property [] clock
 * @category Instructions
 * @category ClaimLenderRewards
 * @category generated
 */
export type ClaimLenderRewardsInstructionAccounts = {
  authority: web3.PublicKey
  globalState: web3.PublicKey
  subOffer: web3.PublicKey
  rewardVault: web3.PublicKey
  chainlinkProgram: web3.PublicKey
  solFeed: web3.PublicKey
  usdcFeed: web3.PublicKey
  lenderRewardVault: web3.PublicKey
  tokenProgram?: web3.PublicKey
  clock: web3.PublicKey
}

export const claimLenderRewardsInstructionDiscriminator = [
  28, 22, 29, 40, 230, 221, 198, 86,
]

/**
 * Creates a _ClaimLenderRewards_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimLenderRewards
 * @category generated
 */
export function createClaimLenderRewardsInstruction(
  accounts: ClaimLenderRewardsInstructionAccounts,
  programId = new web3.PublicKey('6oVXrGCdtnTUR6xCvn2Z3f2CYaiboAGar1DKxzeX8QYh')
) {
  const [data] = claimLenderRewardsStruct.serialize({
    instructionDiscriminator: claimLenderRewardsInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.globalState,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.subOffer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.chainlinkProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.solFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcFeed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lenderRewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
