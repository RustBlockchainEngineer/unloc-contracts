/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link StateAccount}
 * @category Accounts
 * @category generated
 */
export type StateAccountArgs = {
  authority: web3.PublicKey
  rewardMint: web3.PublicKey
  rewardVault: web3.PublicKey
  feeVault: web3.PublicKey
  bump: number
  totalPoint: beet.bignum
  startTime: beet.bignum
  tokenPerSecond: beet.bignum
  earlyUnlockFee: beet.bignum
  profileLevels: beet.bignum[]
}

export const stateAccountDiscriminator = [142, 247, 54, 95, 85, 133, 249, 103]
/**
 * Holds the data for the {@link StateAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StateAccount implements StateAccountArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly rewardMint: web3.PublicKey,
    readonly rewardVault: web3.PublicKey,
    readonly feeVault: web3.PublicKey,
    readonly bump: number,
    readonly totalPoint: beet.bignum,
    readonly startTime: beet.bignum,
    readonly tokenPerSecond: beet.bignum,
    readonly earlyUnlockFee: beet.bignum,
    readonly profileLevels: beet.bignum[]
  ) {}

  /**
   * Creates a {@link StateAccount} instance from the provided args.
   */
  static fromArgs(args: StateAccountArgs) {
    return new StateAccount(
      args.authority,
      args.rewardMint,
      args.rewardVault,
      args.feeVault,
      args.bump,
      args.totalPoint,
      args.startTime,
      args.tokenPerSecond,
      args.earlyUnlockFee,
      args.profileLevels
    )
  }

  /**
   * Deserializes the {@link StateAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [StateAccount, number] {
    return StateAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StateAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<StateAccount> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find StateAccount account at ${address}`)
    }
    return StateAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link StateAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StateAccount, number] {
    return stateAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link StateAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stateAccountBeet.serialize({
      accountDiscriminator: stateAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StateAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: StateAccountArgs) {
    const instance = StateAccount.fromArgs(args)
    return stateAccountBeet.toFixedFromValue({
      accountDiscriminator: stateAccountDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StateAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: StateAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StateAccount.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link StateAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      rewardMint: this.rewardMint.toBase58(),
      rewardVault: this.rewardVault.toBase58(),
      feeVault: this.feeVault.toBase58(),
      bump: this.bump,
      totalPoint: (() => {
        const x = <{ toNumber: () => number }>this.totalPoint
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      startTime: (() => {
        const x = <{ toNumber: () => number }>this.startTime
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      tokenPerSecond: (() => {
        const x = <{ toNumber: () => number }>this.tokenPerSecond
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      earlyUnlockFee: (() => {
        const x = <{ toNumber: () => number }>this.earlyUnlockFee
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      profileLevels: this.profileLevels,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stateAccountBeet = new beet.FixableBeetStruct<
  StateAccount,
  StateAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['rewardMint', beetSolana.publicKey],
    ['rewardVault', beetSolana.publicKey],
    ['feeVault', beetSolana.publicKey],
    ['bump', beet.u8],
    ['totalPoint', beet.u64],
    ['startTime', beet.i64],
    ['tokenPerSecond', beet.u64],
    ['earlyUnlockFee', beet.u64],
    ['profileLevels', beet.array(beet.u128)],
  ],
  StateAccount.fromArgs,
  'StateAccount'
)
