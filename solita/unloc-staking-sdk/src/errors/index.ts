/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidOwner: 'Invalid Owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOwnerError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidOwner'
  constructor() {
    super('Invalid Owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidOwnerError())
createErrorFromNameLookup.set('InvalidOwner', () => new InvalidOwnerError())

/**
 * UnstakeOverAmount: 'Over staked amount'
 *
 * @category Errors
 * @category generated
 */
export class UnstakeOverAmountError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'UnstakeOverAmount'
  constructor() {
    super('Over staked amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnstakeOverAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UnstakeOverAmountError())
createErrorFromNameLookup.set(
  'UnstakeOverAmount',
  () => new UnstakeOverAmountError()
)

/**
 * UnderLocked: 'Under locked'
 *
 * @category Errors
 * @category generated
 */
export class UnderLockedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'UnderLocked'
  constructor() {
    super('Under locked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnderLockedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new UnderLockedError())
createErrorFromNameLookup.set('UnderLocked', () => new UnderLockedError())

/**
 * WorkingPool: 'Pool is working'
 *
 * @category Errors
 * @category generated
 */
export class WorkingPoolError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'WorkingPool'
  constructor() {
    super('Pool is working')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WorkingPoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new WorkingPoolError())
createErrorFromNameLookup.set('WorkingPool', () => new WorkingPoolError())

/**
 * InvalidLockDuration: 'Invalid Lock Duration'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLockDurationError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidLockDuration'
  constructor() {
    super('Invalid Lock Duration')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLockDurationError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidLockDurationError())
createErrorFromNameLookup.set(
  'InvalidLockDuration',
  () => new InvalidLockDurationError()
)

/**
 * InvalidSEQ: 'Invalid SEQ'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSEQError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidSEQ'
  constructor() {
    super('Invalid SEQ')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSEQError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidSEQError())
createErrorFromNameLookup.set('InvalidSEQ', () => new InvalidSEQError())

/**
 * InvalidDenominator: 'InvalidDenominator'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDenominatorError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidDenominator'
  constructor() {
    super('InvalidDenominator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDenominatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidDenominatorError())
createErrorFromNameLookup.set(
  'InvalidDenominator',
  () => new InvalidDenominatorError()
)

/**
 * OverflowMaxProfileLevel: 'Overlfow Max Profile Level'
 *
 * @category Errors
 * @category generated
 */
export class OverflowMaxProfileLevelError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'OverflowMaxProfileLevel'
  constructor() {
    super('Overlfow Max Profile Level')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OverflowMaxProfileLevelError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new OverflowMaxProfileLevelError())
createErrorFromNameLookup.set(
  'OverflowMaxProfileLevel',
  () => new OverflowMaxProfileLevelError()
)

/**
 * InvalidMint: 'Wrong Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidMint'
  constructor() {
    super('Wrong Mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidMintError())
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError())

/**
 * MathOverflow: 'Math operation overflow'
 *
 * @category Errors
 * @category generated
 */
export class MathOverflowError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'MathOverflow'
  constructor() {
    super('Math operation overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MathOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new MathOverflowError())
createErrorFromNameLookup.set('MathOverflow', () => new MathOverflowError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
