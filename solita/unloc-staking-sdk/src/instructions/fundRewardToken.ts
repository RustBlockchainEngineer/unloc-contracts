/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FundRewardToken
 * @category generated
 */
export type FundRewardTokenInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category FundRewardToken
 * @category generated
 */
export const fundRewardTokenStruct = new beet.BeetArgsStruct<
  FundRewardTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'FundRewardTokenInstructionArgs'
)
/**
 * Accounts required by the _fundRewardToken_ instruction
 *
 * @property [] state
 * @property [_writable_, **signer**] authority
 * @property [_writable_] rewardVault
 * @property [_writable_] userVault
 * @category Instructions
 * @category FundRewardToken
 * @category generated
 */
export type FundRewardTokenInstructionAccounts = {
  state: web3.PublicKey
  authority: web3.PublicKey
  rewardVault: web3.PublicKey
  userVault: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const fundRewardTokenInstructionDiscriminator = [
  211, 9, 182, 14, 12, 217, 26, 10,
]

/**
 * Creates a _FundRewardToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category FundRewardToken
 * @category generated
 */
export function createFundRewardTokenInstruction(
  accounts: FundRewardTokenInstructionAccounts,
  args: FundRewardTokenInstructionArgs,
  programId = new web3.PublicKey('EmS3wD1UF9UhejugSrfUydMzWrCKBCxz4Dr1tBUsodfU')
) {
  const [data] = fundRewardTokenStruct.serialize({
    instructionDiscriminator: fundRewardTokenInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.state,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.rewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
