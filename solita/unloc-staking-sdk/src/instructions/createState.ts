/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateState
 * @category generated
 */
export type CreateStateInstructionArgs = {
  bump: number
  tokenPerSecond: beet.bignum
  earlyUnlockFee: beet.bignum
  profileLevels: beet.bignum[]
}
/**
 * @category Instructions
 * @category CreateState
 * @category generated
 */
export const createStateStruct = new beet.FixableBeetArgsStruct<
  CreateStateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['tokenPerSecond', beet.u64],
    ['earlyUnlockFee', beet.u64],
    ['profileLevels', beet.array(beet.u128)],
  ],
  'CreateStateInstructionArgs'
)
/**
 * Accounts required by the _createState_ instruction
 *
 * @property [_writable_] state
 * @property [] rewardVault
 * @property [] rewardMint
 * @property [] feeVault
 * @property [_writable_, **signer**] authority
 * @property [_writable_, **signer**] payer
 * @property [] clock
 * @category Instructions
 * @category CreateState
 * @category generated
 */
export type CreateStateInstructionAccounts = {
  state: web3.PublicKey
  rewardVault: web3.PublicKey
  rewardMint: web3.PublicKey
  feeVault: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  clock: web3.PublicKey
}

export const createStateInstructionDiscriminator = [
  214, 211, 209, 79, 107, 105, 247, 222,
]

/**
 * Creates a _CreateState_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateState
 * @category generated
 */
export function createCreateStateInstruction(
  accounts: CreateStateInstructionAccounts,
  args: CreateStateInstructionArgs,
  programId = new web3.PublicKey('EmS3wD1UF9UhejugSrfUydMzWrCKBCxz4Dr1tBUsodfU')
) {
  const [data] = createStateStruct.serialize({
    instructionDiscriminator: createStateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.feeVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
